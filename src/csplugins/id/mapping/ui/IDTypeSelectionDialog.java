/* File: IDTypeSelectionDialog.java

 Copyright (c) 2006, 2007, The Cytoscape Consortium (www.cytoscape.org)

 The Cytoscape Consortium is:
 - Institute for Systems Biology
 - University of California San Diego
 - Memorial Sloan-Kettering Cancer Center
 - Institut Pasteur
 - Agilent Technologies

 This library is free software; you can redistribute it and/or modify it
 under the terms of the GNU Lesser General Public License as published
 by the Free Software Foundation; either version 2.1 of the License, or
 any later version.

 This library is distributed in the hope that it will be useful, but
 WITHOUT ANY WARRANTY, WITHOUT EVEN THE IMPLIED WARRANTY OF
 MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  The software and
 documentation provided hereunder is on an "as is" basis, and the
 Institute for Systems Biology and the Whitehead Institute
 have no obligations to provide maintenance, support,
 updates, enhancements or modifications.  In no event shall the
 Institute for Systems Biology and the Whitehead Institute
 be liable to any party for direct, indirect, special,
 incidental or consequential damages, including lost profits, arising
 out of the use of this software and its documentation, even if the
 Institute for Systems Biology and the Whitehead Institute
 have been advised of the possibility of such damage.  See
 the GNU Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public License
 along with this library; if not, write to the Free Software Foundation,
 Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.
 */

package csplugins.id.mapping.ui;

import java.util.Set;
import java.util.HashSet;
import java.util.Iterator;

public class IDTypeSelectionDialog extends javax.swing.JDialog {

    /** Creates new form IDTypeSelectionDialog */
    public IDTypeSelectionDialog(java.awt.Frame parent, boolean modal, Set<String> idTypes, Set<String> selectedIdTypes) {
        super(parent, modal);
        this.idTypes = idTypes;
        this.selectedIdTypes = new HashSet<String>(selectedIdTypes);
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
        private void initComponents() {
                java.awt.GridBagConstraints gridBagConstraints;

                idTypePanel = new javax.swing.JPanel();
                javax.swing.JPanel okPanel = new javax.swing.JPanel();
                cancelButton = new javax.swing.JButton();
                okButton = new javax.swing.JButton();

                setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
                getContentPane().setLayout(new java.awt.GridBagLayout());

                idTypePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Select identifier types"));

                idTypeCheckBoxes = new javax.swing.JCheckBox[idTypes.size()];
                int i = 0;
                Iterator<String> it = idTypes.iterator();
                while (it.hasNext()) {
                        String type = it.next();
                        idTypeCheckBoxes[i] = new javax.swing.JCheckBox();
                        idTypeCheckBoxes[i].setText(type);
                        idTypeCheckBoxes[i].setSelected(selectedIdTypes.contains(type));
                        idTypeCheckBoxes[i].addActionListener(new java.awt.event.ActionListener() {
                                public void actionPerformed(java.awt.event.ActionEvent evt) {
                                        javax.swing.JCheckBox cb = ( javax.swing.JCheckBox)evt.getSource();
                                        if (cb.isSelected()) {
                                                selectedIdTypes.add(cb.getText());
                                        } else {
                                                selectedIdTypes.remove(cb.getText());
                                        }
                                        updateOKEnable();
                                }
                        });
                        idTypePanel.add(idTypeCheckBoxes[i]);
                        i++;
                }

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
                getContentPane().add(idTypePanel, gridBagConstraints);

                okPanel.setLayout(new javax.swing.BoxLayout(okPanel, javax.swing.BoxLayout.LINE_AXIS));

                cancelButton.setText("Cancel");
                cancelButton.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                cancelButtonActionPerformed(evt);
                        }
                });
                okPanel.add(cancelButton);

                okButton.setText("   OK   ");
                okButton.setToolTipText("\"Select at least two networks to merge\"");
                okButton.setEnabled(false);
                okButton.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                okButtonActionPerformed(evt);
                        }
                });
                okPanel.add(okButton);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
                getContentPane().add(okPanel, gridBagConstraints);

                pack();
        }// </editor-fold>//GEN-END:initComponents

private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
    setVisible(false);
}//GEN-LAST:event_cancelButtonActionPerformed

private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
    cancelled = false;
    setVisible(false);
}//GEN-LAST:event_okButtonActionPerformed

private void updateOKEnable() {
    if (getSelectedIDTypes().size()>0) {
        okButton.setEnabled(true);
        okButton.setToolTipText(null);
    } else {
        okButton.setEnabled(false);
        okButton.setToolTipText("Please select at least one ID type");
    }
}

public boolean isCancelled() {
    return cancelled;
}

public Set<String> getSelectedIDTypes() {    
    return selectedIdTypes;
}


        // Variables declaration - do not modify//GEN-BEGIN:variables
        private javax.swing.JButton cancelButton;
        private javax.swing.JPanel idTypePanel;
        private javax.swing.JCheckBox[] idTypeCheckBoxes;
        private javax.swing.JButton okButton;
        // End of variables declaration//GEN-END:variables

    boolean cancelled = true;
    private Set<String> idTypes; //ID types to be selected
    private Set<String> selectedIdTypes; //Indicate whether the corresponding ID types are selected
}
